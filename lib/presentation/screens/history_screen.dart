import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:hive/hive.dart';
import 'package:intl/intl.dart';
import '../../core/network/dio_client.dart';
import '../../data/datasources/calculations_local_data_source.dart';
import '../../data/datasources/calculations_remote_data_source.dart';
import '../../data/repositories/calculation_repository.dart';
import '../../data/models/calculation_model.dart';
import '../../core/storage/local_storage.dart'; // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è userId –∏ token

class HistoryScreen extends StatefulWidget {
  final DioClient dioClient;

  const HistoryScreen({super.key, required this.dioClient});

  @override
  _HistoryScreenState createState() => _HistoryScreenState();
}

class _HistoryScreenState extends State<HistoryScreen> {
  late final CalculationRepository repo;
  late final int userId;
  late final String token;
  late Future<List<CalculationModel>> _calculationsFuture;

  @override
  void initState() {
    super.initState();
    repo = CalculationRepository(
      localDataSource: CalculationsLocalDataSource(
        Hive.box<CalculationModel>('calculations'),
      ),
      remoteDataSource: CalculationsRemoteDataSource(widget.dioClient),
    );

    _calculationsFuture = _loadData();
  }

  Future<List<CalculationModel>> _loadData() async {
    await repo.syncCalculations(); // üîπ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    return repo.getCalculations(); // üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è FutureBuilder
  }

  @override
  Widget build(BuildContext context) {
    final dateFormat = DateFormat('dd.MM.yyyy HH:mm:ss');

    return Scaffold(
      appBar: AppBar(
        title: const Text('–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤'),
        automaticallyImplyLeading: false,
      ),
      body: FutureBuilder<List<CalculationModel>>(
        future: _calculationsFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return Center(child: Text('–û—à–∏–±–∫–∞: ${snapshot.error}'));
          }
          final calculations = snapshot.data ?? [];

          if (calculations.isEmpty) {
            return const Center(child: Text('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤'));
          }

          return ListView.builder(
            itemCount: calculations.length,
            itemBuilder: (context, index) {
              final calc = calculations[index];
              final formattedDate = dateFormat.format(calc.date.toLocal());

              return Card(
                child: ListTile(
                  title: Text('–†–∞—Å—á—ë—Ç –æ—Ç $formattedDate'),
                  subtitle: Text('–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä: ${calc.excavatorName}'),
                  onTap:
                      () => showDialog(
                        context: context,
                        builder:
                            (_) => AlertDialog(
                              title: Text('–†–∞—Å—á—ë—Ç –æ—Ç $formattedDate'),
                              content: SingleChildScrollView(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text('''
–ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞: ${calc.excavatorName}
–î–∞—Ç–∞: ${formattedDate}
–°–º–µ–Ω–∞: ${calc.shift}
–í—Ä–µ–º—è —Å–º–µ–Ω—ã (—á.): ${calc.shiftTime}
–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ê/–° (–º–∏–Ω.): ${calc.loadTime}
–í—Ä–µ–º—è —Ä–µ–π—Å–∞ (–¶–∏–∫–ª–∞) –ê/–° (–º–∏–Ω.): ${calc.cycleTime}
–í—Ä–µ–º—è –ø–æ–¥—ä–µ–∑–¥–∞ –ø–æ–¥ 1 –∫–æ–≤—à. (—Å–µ–∫.): ${calc.approachTime}
–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω (–µ–¥.): ${calc.actualTrucks}
–ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞ –≤ —Å–º–µ–Ω—É (–º¬≥/—á–∞—Å.): ${calc.productivity}
–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –ê/–° (–µ–¥.): ${calc.requiredTrucks}
–ü–ª–∞–Ω–æ–≤—ã–π –æ–±—ä–µ–º –≤ —Å–º–µ–Ω—É (–º¬≥.): ${calc.planVolume}
–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –æ–±—ä–µ–º —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞ (–º¬≥.): ${calc.forecastVolume}
${calc.downtime >= 0 ? "–ü—Ä–æ–≥–Ω–æ–∑–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –ø–∞—Ä–∫–∞ –ê/–° –ø–æ–¥ —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–æ–º (—á.)" : "–ü—Ä–æ–≥–Ω–æ–∑–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞, –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ—Å–∞–º–æ—Å–≤–∞–ª–æ–≤ (—á.)"}: ${calc.downtime}
                            '''),
                                    if (calc.downtime < 0)
                                      Padding(
                                        padding: const EdgeInsets.only(top: 10),
                                        child: Text(
                                          "‚ö† –ù–ï–•–í–ê–¢–ö–ê –°–ê–ú–û–°–í–ê–õ–û–í",
                                          style: TextStyle(
                                            color: Colors.red,
                                            fontSize: 16,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                  ],
                                ),
                              ),
                              actions: [
                                TextButton(
                                  onPressed: () => Navigator.pop(context),
                                  child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
                                ),
                              ],
                            ),
                      ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}
