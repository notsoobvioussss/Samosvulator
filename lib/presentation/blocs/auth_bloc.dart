import 'package:flutter_bloc/flutter_bloc.dart';
import '../../domain/entities/user.dart';
import '../../domain/usecases/login_usecase.dart';
import '../../domain/usecases/register_usecase.dart';
import '../../core/storage/local_storage.dart';

class AuthBloc extends Bloc<AuthEvent, AuthState> {
  final LoginUseCase loginUseCase;
  final RegisterUseCase registerUseCase;

  AuthBloc({required this.loginUseCase, required this.registerUseCase})
      : super(AuthInitial()) {

    // üîπ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    on<LoginEvent>((event, emit) async {
      emit(AuthLoading());
      try {
        final user = await loginUseCase.call(event.username, event.password);

        if (user.token.isEmpty) {
          throw Exception("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
        }

        await LocalStorage.saveToken(user.token);
        await LocalStorage.saveUserId(user.id);
        emit(AuthSuccess());
      } catch (e) {
        emit(AuthFailure(_mapErrorToMessage(e.toString())));
      }
    });

    // üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    on<RegisterEvent>((event, emit) async {
      emit(AuthLoading());
      try {
        final user = User(
          id: 0,
          username: event.username,
          name: event.name,
          surname: event.surname,
          company: event.company,
          section: event.section,
          jobTitle: event.jobTitle,
          token: '',
        );

        await registerUseCase(user: user, password: event.password);
        emit(AuthSuccess());
      } catch (e) {
        emit(AuthFailure(_mapErrorToMessage(e.toString())));
      }
    });

    // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–∞–≤—Ç–æ-—Ä–∞–∑–ª–æ–≥–∏–Ω –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω)
    on<CheckAuthEvent>((event, emit) async {
      final token = await LocalStorage.getToken();
      if (token == null || token.isEmpty) {
        emit(AuthInitial());
      } else {
        emit(AuthSuccess());
      }
    });
  }

  /// üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ API
  String _mapErrorToMessage(String error) {
    if (error.contains("401")) {
      return "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å";
    } else if (error.contains("409")) {
      return "–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
    } else if (error.contains("500")) {
      return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
    }
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑";
  }
}

/// üîπ –°–æ–±—ã—Ç–∏—è (Events)
abstract class AuthEvent {}

class LoginEvent extends AuthEvent {
  final String username;
  final String password;

  LoginEvent({required this.username, required this.password});
}

class RegisterEvent extends AuthEvent {
  final String username;
  final String password;
  final String name;
  final String surname;
  final String company;
  final String section;
  final String jobTitle;

  RegisterEvent({
    required this.username,
    required this.password,
    required this.name,
    required this.surname,
    required this.company,
    required this.section,
    required this.jobTitle,
  });
}


/// üîπ –°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ (–∞–≤—Ç–æ-—Ä–∞–∑–ª–æ–≥–∏–Ω)
class CheckAuthEvent extends AuthEvent {}

/// üîπ –°–æ—Å—Ç–æ—è–Ω–∏—è (States)
abstract class AuthState {}

class AuthInitial extends AuthState {}

class AuthLoading extends AuthState {}

class AuthSuccess extends AuthState {}

class AuthFailure extends AuthState {
  final String message;
  AuthFailure(this.message);
}