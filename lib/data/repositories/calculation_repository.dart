import 'dart:async';
import 'package:internet_connection_checker/internet_connection_checker.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:intl/intl.dart';

import '../datasources/calculations_local_data_source.dart';
import '../datasources/calculations_remote_data_source.dart';
import '../models/calculation_model.dart';

class CalculationRepository {
  final CalculationsLocalDataSource localDataSource;
  final CalculationsRemoteDataSource remoteDataSource;
  Timer? _syncTimer;

  CalculationRepository({
    required this.localDataSource,
    required this.remoteDataSource,
  }) {
    startAutoSync();
  }

  /// üîπ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<String?> _getToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString("token");
  }

  /// üîπ –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int?> _getUserId() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt("user_id");
  }

  /// üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∫ —Ñ–æ—Ä–º–∞—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ (ISO 8601 UTC)
  String _formatDate(DateTime date) {
    String formattedDate = "${date.toUtc().toIso8601String().substring(0, 23)}Z";
    print("Date current$formattedDate");
    return formattedDate;
  }

  /// üîπ –ü–æ–ª—É—á–∞–µ–º **–æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ** (–ª–æ–∫–∞–ª—å–Ω—ã–µ + —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ)
  Future<List<CalculationModel>> getCalculations() async {
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
    final localData = await localDataSource.getCalculations();
    print("üìå –õ–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏: ${localData.length}");

    final userId = await _getUserId();
    final token = await _getToken();

    if (userId == null || token == null) {
      print("‚ö† –ù–µ—Ç user_id –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏");
      return localData;
    }

    if (await InternetConnectionChecker.createInstance().hasConnection) {
      print("üåç –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...");
      try {
        final serverData = await remoteDataSource.getCalculations(userId, token);
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞: ${serverData.length} –∑–∞–ø–∏—Å–µ–π");

        // üîπ –§–∏–ª—å—Ç—Ä—É–µ–º **–Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏** —Å —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–∏–≤–æ–¥—è `date` –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        final newRecords = serverData.where((serverCalc) =>
        !localData.any((localCalc) =>
        _formatDate(localCalc.date) == _formatDate(serverCalc.date) &&
            localCalc.excavatorName == serverCalc.excavatorName)
        ).toList();

        if (newRecords.isNotEmpty) {

          print("üì• –î–æ–±–∞–≤–ª—è–µ–º ${newRecords.length} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ");
          await localDataSource.saveCalculations(newRecords);
        }

        return localData;
      } catch (e) {
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞: $e");
        return localData;
      }
    } else {
      print("üö´ –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
      return localData;
    }
  }

  /// üîπ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å (–ª–æ–∫–∞–ª—å–Ω–æ + —Å–µ—Ä–≤–µ—Ä)
  Future<void> addCalculation(CalculationModel calculation) async {
    print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á—ë—Ç: ${calculation.excavatorName} - ${calculation.date}");

    final token = await _getToken();

    // –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—É –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    final formattedCalculation = CalculationModel(
      id: calculation.id,
      excavatorName: calculation.excavatorName,
      date: DateTime.parse(_formatDate(calculation.date)), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ISO 8601 UTC
      shift: calculation.shift,
      shiftTime: calculation.shiftTime,
      loadTime: calculation.loadTime,
      cycleTime: calculation.cycleTime,
      approachTime: calculation.approachTime,
      actualTrucks: calculation.actualTrucks,
      productivity: calculation.productivity,
      requiredTrucks: calculation.requiredTrucks,
      planVolume: calculation.planVolume,
      forecastVolume: calculation.forecastVolume,
      downtime: calculation.downtime,
      userId: calculation.userId,
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º **–ª–æ–∫–∞–ª—å–Ω–æ**
    await localDataSource.saveCalculation(formattedCalculation);
    print("‚úÖ –†–∞—Å—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ");
  }

  /// üîπ **–î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è**
  Future<void> syncCalculations() async {
    print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...");

    final userId = await _getUserId();
    final token = await _getToken();

    if (userId == null || token == null) {
      print("‚ö† –ù–µ—Ç user_id –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞");
      return;
    }

    if (await InternetConnectionChecker.createInstance().hasConnection) {
      print("üåç –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...");

      final localData = await localDataSource.getCalculations();
      final serverData = await remoteDataSource.getCalculations(userId, token);

      print("üìå –õ–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${localData.length}");
      print("üìå –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${serverData.length}");

      final localToSend = localData.where((localCalc) =>
      !serverData.any((serverCalc) =>
      _formatDate(localCalc.date) == _formatDate(serverCalc.date) &&
          localCalc.excavatorName == serverCalc.excavatorName)).toList();

      if (localToSend.isNotEmpty) {
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${localToSend.length} –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");
        for (var calculation in localToSend) {
          await remoteDataSource.uploadCalculation(calculation, token);
        }
        print("‚úÖ –ù–æ–≤—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
      } else {
        print("‚úÖ –í—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
      }

      // üîπ **2. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ**
      final newServerData = serverData.where((serverCalc) =>
      !localData.any((localCalc) =>
      _formatDate(localCalc.date) == _formatDate(serverCalc.date) &&
          localCalc.excavatorName == serverCalc.excavatorName)).toList();

      if (newServerData.isNotEmpty) {
        print("üì• –î–æ–±–∞–≤–ª—è–µ–º ${newServerData.length} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ");
        await localDataSource.saveCalculations(newServerData);
      } else {
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ");
      }
    } else {
      print("üö´ –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞");
    }
  }

  /// üîπ **–§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑ –≤ —á–∞—Å**
  void startAutoSync() {
    _syncTimer?.cancel();
    _syncTimer = Timer.periodic(const Duration(hours: 1), (timer) async {
      await syncCalculations();
    });
  }
}